======[C#의 시작 첫걸음]========================
using System;
->
using	      : 네임스페이스를 사용하겠다고 선언하는 키워드
System	      : 숫자, 텍스트와 같은 데이터를 다룰 수 있는 기본적인 데이터 처리 클래스를 비롯하여
	 	C#코드가 기본적으로 필요로하는 클래스를 담고 있는 네임스페이스
세미콜론(;)     :컴파일러에세 문장의 끝을 알리는 기호

 namespace는 성격이나 하는 일이 비슷한 클래스나 구초체형식 등을 하나의 이름아래 묶는 역할을 수행

클래스는 C# 프로그램을 구성하는 기본단위이며 "데이터 +메소드"로 이루어짐

static void Main( string[] args ) { }            프로그램의 시작점 (ex. start)

 static    void         Main          ( string[] args )    {                     }          
한정자  반환형식  메소드이름          매개 변수         코드블록   쓰는곳
-----------------------------------------------------------------------------------------

C#데이터는 기존의 CPP데이터 형식과 동일하다
데이터 형식2개
기본 데이터 형식 : int, char......
복합 데이터 형식 : string, Socket, Image.....

형식
값 형식 : 변수의 데이터의 값을 담는 형식
참조 형식 : 변수에 데이터의 위치를 담는 형식 [배열, CLASS(object)]

변수 : 데이터를 담는 일정 크기의 공간(여기에서 "일정 크기"는 데이터형식에 따라 결정)
  EX.)  int( <-데이터 형식)_____ <-변수의 이름
   
데이터할당
___<-변수의 이름  = <--대입연산자 100<-데이터 ;====> X=100;
 

======값 형식=====
int X// 변수선언
X = 100; //데이터 할당 
======> 한번에 int X = 100; 변수 선언과 데이터할당(초기화)을 한번에 해주었다.


=== 참조 형식=====

[object, Class 중 한개] = 위치(변수의 주소)
EX.) odject a = 10  //object a는 10이라는 위치(힙)에 있는 값이다.

===데이터의 형식=====
int 정수형
float 실수형
char 문자데이터 ('가', 'a')
string 문자열 ("안녕하세요", "hello")
bool 논리형 참(TURE, 0이 아닌값)과 거칫(FALSE, 0인값)을 판단함


======****object가 참조형식이면서 값형식도 가능한 이유******====
Boxing 과 Unboxing이 가능해서 object는 참조형식이면서 값형식도 가능하다.

Boxing 	 :  값형식의 데이터를 힙(변수의 주소)에 넣고 글 힙의 위치를 object형식 변수가 가리키도록해서

Unboxing :  힙 안에 있는 값형식의 데이터를 상자를 풀어서 꺼내는 것


==============데이터의 형변환===================
[숫자 형변환  정수 -> 실수]
int a = 500; 
Console.WriteLine(a); 

uint b = (uint)a; //int a를 uint a로 형변환
Console.WriteLine(b); 
                                                             출력되는 값은   500 , 500 , -30 , 4294967266
int x = -30; 
Console.WriteLine(x); 

uint y = (uint)x; 
Console.WriteLine(y); 

참고   ****[실수형을 정수로 형변환을 하면 소숫점아래를 버린다.]**********

[문자형와 숫자의 형변환]
숫자 -> 문자열 : ToString() 메소드 이용
예)    int a = 3;
    string b = a.ToString();
문자열 -> 숫자 : Parse() 메소드 이용
   예) int a = int.Parse(“12345”);

================상수(Constant)=======================
상수
변수와는 달리 그안에 담긴 데이터를 절대 바꿀 수 없는 메모리 공간
예) public const int a = 4; 라고 선언하면 절대 바꿀 수 없다.
사용하는 이유는 개발자는 완벽한 존재가 아니여서 바꿀 수 없는 값으로 기정해 놓은것
const의 형식을 지정안하면 자동으로 static이 된다.

상수는 기본형과 열거형이 있다.
열거형은 enum 키워드를 사용
예) enum DialogResult { YES, NO, CANCEL, CONFIRM, OK }

=====================Nullable=============================
null(비어있는) 값이 필요할 때 사용 ==>정해지지 않은값
데이터형식 뒤에 "?"만 붙여주면 된다.
  예)  int? a     = null;
       float? b   = null;
      double? c = null;


===================VAR(자동형식지정)==========
int 와 string은 많이 쓰므로 명시적 형식말고 vard을 사용하면 자동으로 해당 변수의 병식을 지정
예) var a = 3;             // a는 int 형식
     var b = "Hello";    // b는 string 형식
